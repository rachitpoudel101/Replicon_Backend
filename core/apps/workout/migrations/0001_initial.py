# Generated by Django 5.2.6 on 2025-09-16 04:19

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Exercise",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Name of the exercise", max_length=100),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("chest", "Chest"),
                            ("back", "Back"),
                            ("shoulders", "Shoulders"),
                            ("biceps", "Biceps"),
                            ("triceps", "Triceps"),
                            ("legs", "Legs"),
                            ("abs", "Abs"),
                            ("cardio", "Cardio"),
                            ("full_body", "Full Body"),
                        ],
                        help_text="Category/muscle group targeted by this exercise",
                        max_length=50,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Brief description of the exercise",
                        null=True,
                    ),
                ),
                (
                    "instructions",
                    models.TextField(
                        blank=True,
                        help_text="Step-by-step instructions for performing the exercise",
                        null=True,
                    ),
                ),
                (
                    "muscle_groups",
                    models.CharField(
                        help_text="Comma-separated list of muscle groups targeted (e.g., 'chest, triceps, shoulders')",
                        max_length=200,
                    ),
                ),
                (
                    "equipment_needed",
                    models.CharField(
                        blank=True,
                        help_text="Equipment required to perform this exercise",
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "difficulty_level",
                    models.CharField(
                        choices=[
                            ("beginner", "Beginner"),
                            ("intermediate", "Intermediate"),
                            ("advanced", "Advanced"),
                        ],
                        default="beginner",
                        help_text="Difficulty level of the exercise",
                        max_length=20,
                    ),
                ),
                (
                    "calories_per_minute",
                    models.FloatField(
                        blank=True,
                        help_text="Estimated calories burned per minute during this exercise",
                        null=True,
                    ),
                ),
                (
                    "exercise_image",
                    models.ImageField(
                        blank=True,
                        help_text="Image demonstrating the exercise",
                        null=True,
                        upload_to="exercise_images/",
                    ),
                ),
                (
                    "video_url",
                    models.URLField(
                        blank=True,
                        help_text="URL to a video demonstration of the exercise",
                        null=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this exercise is currently available for use",
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the exercise was created",
                    ),
                ),
            ],
            options={
                "db_table": "exercises",
            },
        ),
        migrations.CreateModel(
            name="MemberProgress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("weight", models.FloatField(help_text="Current weight in kilograms")),
                (
                    "body_fat_percentage",
                    models.FloatField(
                        blank=True, help_text="Body fat percentage", null=True
                    ),
                ),
                (
                    "muscle_mass",
                    models.FloatField(
                        blank=True, help_text="Muscle mass in kilograms", null=True
                    ),
                ),
                (
                    "measurements",
                    models.JSONField(
                        blank=True,
                        help_text="Body measurements (chest, waist, hip, etc.) in JSON format",
                        null=True,
                    ),
                ),
                (
                    "progress_photos",
                    models.ImageField(
                        blank=True,
                        help_text="Progress photos to track visual changes",
                        null=True,
                        upload_to="progress_photos/",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about the progress record",
                        null=True,
                    ),
                ),
                (
                    "recorded_date",
                    models.DateField(
                        auto_now_add=True,
                        help_text="Date when this progress was recorded",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        help_text="Member whose progress is being tracked",
                        limit_choices_to={"role": "member"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="progress_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "member_progress",
            },
        ),
        migrations.CreateModel(
            name="WorkoutPlan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the workout plan", max_length=100
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of the workout plan"
                    ),
                ),
                (
                    "goal",
                    models.CharField(
                        choices=[
                            ("fat_loss", "Fat Loss"),
                            ("weight_loss", "Weight Loss"),
                            ("muscle_gain", "Muscle Gain"),
                            ("strength", "Strength Training"),
                            ("endurance", "Endurance"),
                            ("general_fitness", "General Fitness"),
                        ],
                        help_text="Primary fitness goal of this workout plan",
                        max_length=20,
                    ),
                ),
                (
                    "day_of_week",
                    models.CharField(
                        choices=[
                            ("sunday", "Sunday"),
                            ("monday", "Monday"),
                            ("tuesday", "Tuesday"),
                            ("wednesday", "Wednesday"),
                            ("thursday", "Thursday"),
                            ("friday", "Friday"),
                        ],
                        help_text="Day of the week when this workout should be performed",
                        max_length=20,
                    ),
                ),
                (
                    "duration_weeks",
                    models.IntegerField(
                        default=4, help_text="Duration of the workout plan in weeks"
                    ),
                ),
                (
                    "calories_target",
                    models.IntegerField(
                        blank=True,
                        help_text="Target calories to burn during this workout",
                        null=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this workout plan is currently active",
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the workout plan was created",
                    ),
                ),
                (
                    "updated_date",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the workout plan was last updated",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        help_text="Member assigned to this workout plan",
                        limit_choices_to={"role": "member"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assigned_workout_plans",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "trainer",
                    models.ForeignKey(
                        help_text="Trainer who created this workout plan",
                        limit_choices_to={"role": "trainer"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_workout_plans",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "workout_plans",
            },
        ),
        migrations.CreateModel(
            name="WorkoutLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        auto_now_add=True,
                        help_text="Date when the workout was performed",
                    ),
                ),
                (
                    "sets_completed",
                    models.IntegerField(help_text="Number of sets actually completed"),
                ),
                (
                    "reps_completed",
                    models.IntegerField(
                        help_text="Number of repetitions actually completed"
                    ),
                ),
                (
                    "weight_used",
                    models.FloatField(
                        blank=True,
                        help_text="Weight used during the exercise",
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about the workout performance",
                        null=True,
                    ),
                ),
                (
                    "duration_minutes",
                    models.IntegerField(
                        blank=True,
                        help_text="Duration of the exercise in minutes",
                        null=True,
                    ),
                ),
                (
                    "exercise",
                    models.ForeignKey(
                        help_text="Exercise that was performed",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="workout.exercise",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        help_text="Member who performed this workout",
                        limit_choices_to={"role": "member"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="workout_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "workout_plan",
                    models.ForeignKey(
                        blank=True,
                        help_text="Workout plan this log entry belongs to (optional)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="logs",
                        to="workout.workoutplan",
                    ),
                ),
            ],
            options={
                "db_table": "workout_logs",
            },
        ),
        migrations.CreateModel(
            name="WorkoutSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "start_time",
                    models.DateTimeField(
                        help_text="Date and time when the workout session started"
                    ),
                ),
                (
                    "end_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the workout session ended",
                        null=True,
                    ),
                ),
                (
                    "total_calories_burned",
                    models.IntegerField(
                        blank=True,
                        help_text="Total calories burned during the session",
                        null=True,
                    ),
                ),
                (
                    "completed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the workout session was completed",
                    ),
                ),
                (
                    "rating",
                    models.IntegerField(
                        blank=True,
                        help_text="Session rating on a scale of 1-5",
                        null=True,
                    ),
                ),
                (
                    "feedback",
                    models.TextField(
                        blank=True,
                        help_text="Member's feedback about the workout session",
                        null=True,
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when this session record was created",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        help_text="Member performing this workout session",
                        limit_choices_to={"role": "member"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="workout_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "workout_plan",
                    models.ForeignKey(
                        help_text="Workout plan being followed in this session",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to="workout.workoutplan",
                    ),
                ),
            ],
            options={
                "db_table": "workout_sessions",
            },
        ),
        migrations.CreateModel(
            name="TrainerMember",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "assigned_date",
                    models.DateField(
                        auto_now_add=True,
                        help_text="Date when the member was assigned to the trainer",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this trainer-member relationship is currently active",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this trainer-member assignment",
                        null=True,
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False, help_text="Soft delete flag for this assignment"
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        help_text="Select the member to be assigned to this trainer",
                        limit_choices_to={"role": "member"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="member_trainer",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "trainer",
                    models.ForeignKey(
                        help_text="Select the trainer for this member assignment",
                        limit_choices_to={"role": "trainer"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trainer_members",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "trainer_members",
                "unique_together": {("trainer", "member")},
            },
        ),
        migrations.CreateModel(
            name="WorkoutPlanExercise",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sets",
                    models.IntegerField(
                        help_text="Number of sets to perform for this exercise"
                    ),
                ),
                (
                    "reps",
                    models.IntegerField(help_text="Number of repetitions per set"),
                ),
                (
                    "weight",
                    models.FloatField(
                        blank=True,
                        help_text="Weight to be used for this exercise (optional for bodyweight exercises)",
                        null=True,
                    ),
                ),
                (
                    "rest_time_seconds",
                    models.IntegerField(
                        default=60, help_text="Rest time in seconds between sets"
                    ),
                ),
                (
                    "order",
                    models.IntegerField(
                        help_text="Order/sequence of this exercise in the workout plan"
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Special instructions or notes for this exercise",
                        null=True,
                    ),
                ),
                (
                    "exercise",
                    models.ForeignKey(
                        help_text="Exercise to be included in the workout plan",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="workout.exercise",
                    ),
                ),
                (
                    "workout_plan",
                    models.ForeignKey(
                        help_text="Workout plan this exercise belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="plan_exercises",
                        to="workout.workoutplan",
                    ),
                ),
            ],
            options={
                "db_table": "workout_plan_exercises",
                "unique_together": {("workout_plan", "exercise", "order")},
            },
        ),
    ]
